from _typeshed import Incomplete
from collections.abc import Sequence
from typing import Union
from win32.lib.pywintypes import error as error

def NetFileClose(servername: Union[str, None], fileid: int, /) -> None: ...
def NetFileEnum(
    level: int, servername: str | None = ..., basepath: str | None = ..., username: str | None = ..., /
) -> Sequence[dict[Incomplete, Incomplete]]: ...
def NetFileGetInfo(level: int, servername: Union[str, None], fileid: int, /) -> dict[Incomplete, Incomplete]: ...
def NetGetAnyDCName(server: str | None = ..., domain: str | None = ..., /) -> str: ...
def NetGetDCName(server: str | None = ..., domain: str | None = ..., /) -> str: ...
def NetGetJoinInformation() -> tuple[str, int]: ...
def NetGroupAdd(server: Union[str, None], level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetGroupAddUser(server: Union[str, None], group: str, username: str, /) -> None: ...
def NetGroupDel(server: Union[str, None], groupname: str, /) -> None: ...
def NetGroupDelUser(server: Union[str, None], group: str, username: str, /) -> None: ...
def NetGroupEnum(
    server: Union[str, None], level: int, prefLen: int, resumeHandle: int = ..., /
) -> tuple[list[dict[Incomplete, Incomplete]], int, int]: ...
def NetGroupGetInfo(server: Union[str, None], groupname: str, level: int, /) -> dict[Incomplete, Incomplete]: ...
def NetGroupGetUsers(
    server: Union[str, None], groupName: str, level: int, resumeHandle: int = ..., prefLen: int = 4096, /
) -> tuple[list[dict[Incomplete, Incomplete]], int, int]: ...
def NetGroupSetInfo(server: Union[str, None], groupname: str, level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetGroupSetUsers(
    server: Union[str, None], group: str, level: int, members: list[dict[Incomplete, Incomplete]], /
) -> None: ...
def NetLocalGroupAdd(server: Union[str, None], level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetLocalGroupAddMembers(
    server: Union[str, None], group: str, level: int, members: list[dict[Incomplete, Incomplete]], /
) -> None: ...
def NetLocalGroupDel(server: Union[str, None], groupname: str, /) -> None: ...
def NetLocalGroupDelMembers(server: Union[str, None], group: str, members: list[str], /) -> None: ...
def NetLocalGroupEnum(
    server: Union[str, None], level: int, prefLen: int, resumeHandle: int = ..., /
) -> tuple[list[dict[Incomplete, Incomplete]], int, int]: ...
def NetLocalGroupGetInfo(server: Union[str, None], groupname: str, level: int, /) -> dict[Incomplete, Incomplete]: ...
def NetLocalGroupGetMembers(
    server: Union[str, None], groupName: str, level: int, resumeHandle: int = ..., prefLen: int = 4096, /
) -> tuple[list[dict[Incomplete, Incomplete]], int, int]: ...
def NetLocalGroupSetInfo(server: Union[str, None], groupname: str, level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetLocalGroupSetMembers(
    server: Union[str, None], group: str, level: int, members: list[dict[Incomplete, Incomplete]], /
) -> None: ...
def NetMessageBufferSend(domain: Union[str, None], userName: str, fromName: Union[str, None], message: str, /) -> None: ...
def NetMessageNameAdd(server: Union[str, None], msgname: str, /) -> None: ...
def NetMessageNameDel(server: Union[str, None], msgname: str, /) -> None: ...
def NetMessageNameEnum(Server: Union[str, None], /) -> None: ...
def NetServerComputerNameAdd(ServerName: str, EmulatedDomainName: Union[str, None], EmulatedServerName: str, /) -> None: ...
def NetServerComputerNameDel(ServerName: str, EmulatedServerName: str, /) -> None: ...
def NetServerDiskEnum(server: Union[str, None], level: int = ..., /) -> list[Incomplete]: ...
def NetServerEnum(
    server: Union[str, None], level: int, _type: int, prefLen: int, domain: str | None = ..., resumeHandle: int = ..., /
) -> tuple[list[dict[Incomplete, Incomplete]], int, int]: ...
def NetServerGetInfo(server: Union[str, None], level: int, /) -> dict[Incomplete, Incomplete]: ...
def NetServerSetInfo(server: Union[str, None], level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetSessionDel(server: Union[str, None], client: str | None = ..., username: str | None = ..., /) -> None: ...
def NetSessionEnum(
    level: int, server: str | None = ..., client: str | None = ..., username: str | None = ..., /
) -> Sequence[dict[Incomplete, Incomplete]]: ...
def NetSessionGetInfo(level: int, server: Union[str, None], client: str, username: str, /) -> dict[Incomplete, Incomplete]: ...
def NetShareAdd(server: Union[str, None], level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetShareCheck(server: Union[str, None], deviceName: str, /) -> Union[tuple[int, Incomplete], tuple[int, None]]: ...
def NetShareDel(server: Union[str, None], shareName: str, reserved: int = ..., /) -> None: ...
def NetShareEnum(
    server: Union[str, None], level: int, prefLen: int, serverName: Union[str, None], resumeHandle: int = ..., /
) -> Union[tuple[list[dict[Incomplete, Incomplete]], int, int], list[tuple[Incomplete, Incomplete, Incomplete]]]: ...
def NetShareGetInfo(server: Union[str, None], netname: str, level: int, /) -> dict[Incomplete, Incomplete]: ...
def NetShareSetInfo(server: Union[str, None], netname: str, level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetStatisticsGet(
    server: Union[str, None], service: str, level: int = ..., options: int = ..., /
) -> dict[Incomplete, Incomplete]: ...
def NetUseAdd(server: Union[str, None], level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetUseDel(server: Union[str, None], useName: str, forceCond: int = ..., /) -> None: ...
def NetUseEnum(
    server: Union[str, None], level: int, prefLen: int, resumeHandle: int = ..., /
) -> tuple[list[dict[Incomplete, Incomplete]], int, int]: ...
def NetUseGetInfo(server: Union[str, None], usename: str, level: int = ..., /) -> dict[Incomplete, Incomplete]: ...
def NetUserAdd(server: Union[str, None], level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetUserChangePassword(
    server: Union[str, None], username: Union[str, None], oldPassword: str, newPassword: str, /
) -> None: ...
def NetUserDel(server: Union[str, None], username: str, /) -> None: ...
def NetUserEnum(
    server: Union[str, None], level: int, filter: int, prefLen: int, resumeHandle: int = ..., /
) -> tuple[list[dict[Incomplete, Incomplete]], int, int]: ...
def NetUserGetGroups(serverName: Union[str, None], userName: str, /) -> list[tuple[str, int]]: ...
def NetUserGetInfo(server: Union[str, None], username: str, level: int, /) -> dict[Incomplete, Incomplete]: ...
def NetUserGetLocalGroups(serverName: Union[str, None], userName: str, flags: int, /) -> list[Incomplete]: ...
def NetUserModalsGet(server: Union[str, None], level: int, /) -> dict[Incomplete, Incomplete]: ...
def NetUserModalsSet(server: Union[str, None], level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetUserSetInfo(server: Union[str, None], username: str, level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetValidateName(
    Server: Union[str, None], Name: str, NameType: int, Account: str | None = ..., Password: str | None = ..., /
) -> Union[None, Exception]: ...
def NetValidatePasswordPolicy(
    Server: Union[str, None],
    Qualifier: None,
    ValidationType: int,
    arg: Union[dict[Incomplete, Incomplete], tuple[Incomplete, ...]],
    /,
) -> tuple[Incomplete, int]: ...
def NetWkstaGetInfo(server: Union[str, None], level: int, /) -> dict[Incomplete, Incomplete]: ...
def NetWkstaSetInfo(server: Union[str, None], level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetWkstaTransportAdd(server: Union[str, None], level: int, data: dict[Incomplete, Incomplete], /) -> None: ...
def NetWkstaTransportDel(server: Union[str, None], TransportName: str, ucond: int = ..., /) -> None: ...
def NetWkstaTransportEnum(
    server: Union[str, None], level: int, prefLen: int, resumeHandle: int = ..., /
) -> tuple[list[dict[Incomplete, Incomplete]], int, int]: ...
def NetWkstaUserEnum(
    server: Union[str, None], level: int, prefLen: int, resumeHandle: int = ..., /
) -> tuple[list[dict[Incomplete, Incomplete]], int, int]: ...

SERVICE_SERVER: str
SERVICE_WORKSTATION: str
USE_FORCE: int
USE_LOTS_OF_FORCE: int
USE_NOFORCE: int
